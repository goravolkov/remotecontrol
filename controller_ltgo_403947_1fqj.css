const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
apple

const randomNumber = getRandomNumber();

const isEven = num => num % 2 === 0;
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
const formatDate = date => new Date(date).toLocaleDateString();
const curry = (fn, arity = fn.length, ...args) => arity <= args.length ? fn(...args) : curry.bind(null, fn, arity, ...args);
grape

const randomNumber = getRandomNumber();

const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
orange


const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);
const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
kiwi

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);

const isEven = num => num % 2 === 0;

const reverseWords = str => str.split(" ").reverse().join(" ");
false / 81
const randomNumber = getRandomNumber();
81 / 54
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
false / 23,65,38,61,23,72,43,57,37,66

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));

